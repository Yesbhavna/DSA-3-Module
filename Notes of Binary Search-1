Q SQUARE ROOT OF A NUMBER

there are 2 cases:-

perfect = 16      not perfect = 28
ans = 4           floor = 5.. ans = 5

brute force (1 to n)

ans = 0
for(int i =1; i<=n ; i++){
int val = i*i
if(val <= n)
ans = i
else break


number = 17
n = 1
ans =0

Dry Run
i=1
val = 1*1 =1
1<=17
ans = 1
i=2   2*2=4
4<=17
ans = 2
i = 3
3*3 = 9  9<17  \
ans = 3
i =4......4*4 =16  16<17
ans = 4
i=5
5*5= 25  25>17

Time Complexity: O(N), N = the given number.
Reason: Since we are using linear search, we traverse the entire answer space.

Space Complexity: O(1) as we are not using any extra space.


Optimised Approach - :
Binary search 
low = 1

high = n
mid = 
if(mid *mid <=n)
we focus on getting the highest number
low = mid+1 


if(mid * mid > n)
high = mid-1   ............base conditin till low<high

DRY RUN-:

target = 37
low = 1             high = 37
mid = 19
val = 19*19 = 361
361> 37......eliminate right
high = mid-1 = 18
mid = 9
val = 9*9 - 81
81>37......eliminate right
high = 8
 mid = 4
val = 4 * 4 = 16
16<=37  left part 
low = mid +1 = 5
 mid = 6
val = 6*6 = 36

36<=37...left part is eliminated
low = mid+1 = 7

mid = 7
val = 7*7 = 49
49>37           low = 7
                high = 6 since high is less than low so 

return high = 6



Q Search In a 2D matrix


Brute force 

for(i = 0; i<n; i++){
for(j=0; j<m;j++){
if(arr[i][j] == target){
return true;
}else 
false

Time Complexity is O(N^2)
Space Complexity = O(1)

Optimised Approach
Binary Search

First step we will not be able to directly appluy binary search on 2-d array, it is impossible to decide the mid here
so we will Find a potential row to do the BS
If(arr[i][0] <= target && target <= arr[i][m-1])

Find the Potential row
 mention the condition to find Potential Row
 Do the bs on a potento row
if you find the target return true
other 
false


Dry run 
[1, 2,3,4],
[5,6,7,8],
[9,10,11,12]
n= 3
m= 4

when i =0
1<=8<=4    not follow the condition 

when i = 1
5 <= 8<= 8 follow the condition so that row 1 is our potential row, therefore we will do the binary search on this
			DO the bS IN A POTEntial row
[5,6,7,8]
  low = 0 
high = 3
mid = 1
8>6........    low = mid+1= 1+1 =2
mid = 2
8>7  === low =mid+1 = 3   
arr[3] = 8
8 == 8

true 
Time Complexity: O(N + logM), where N = given row number, M = given column number.
Space Complexity = O(1)



Q Search in roated sorted array

[1, 2,3, 4,5]
 rotate it at index 3        [4,5,1,2,3]


Brute force approach to do the linear search

Optimised approach

one of the two half will always be sorted,one part of arary should be sorted
try to find which part of array is sorted
once you find that
just compsre the target value

if(arr[mid] == target) return mid

if(arr[low] <= arr[mid]............left part is sorted

if (arr[low] <= target && target <= arr[mid]) the left part is sorted , we will eliminate right part
high = mid-1
else low= mid+1

if we not able to find target in my left sorted then move to right

if right part is sorted
arr[mid] <= target && target <= arr[high]
right part is sorted....eliminate left part 
low = mid+1
else high = mid-1


[4,5,6,1,2,3]
k =2
low = 0    high = 5
mid = 2 arr[mid] = 6

arr[low] < arr[mid]  and my target is 2
4<6
4<6 && 2<6...left part is sorted
update
low = mid+1= 3

mid = (3+5)/2= 4

mid = 4
arr[mid] = arr[4] = 2
k=2
2 = 2
return the index 4 that is mid




 
